/* tslint:disable */

/**
 * This file has been automatically generated by the [capnpc-ts utility](https://github.com/jdiaz5513/capnp-ts).
 */

import * as capnp from "capnp-ts";
import { ObjectSize as __O, Struct as __S } from 'capnp-ts';
export const _capnpFileId = "85150b117366d14b";
export class Calculator_Expression_Call extends __S {
    static readonly _capnp = { displayName: "call", id: "d99522a3d3878d66", size: new __O(16, 2) };
    static _Params: capnp.ListCtor<Calculator_Expression>;
    getFunction(): capnp.Interface { return __S.getPointerAs(0, capnp.Interface, this); }
    setFunction(value: capnp.Interface): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptParams(value: capnp.Orphan<capnp.List<Calculator_Expression>>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownParams(): capnp.Orphan<capnp.List<Calculator_Expression>> { return __S.disown(this.getParams()); }
    getParams(): capnp.List<Calculator_Expression> { return __S.getList(1, Calculator_Expression_Call._Params, this); }
    hasParams(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initParams(length: number): capnp.List<Calculator_Expression> { return __S.initList(1, Calculator_Expression_Call._Params, length, this); }
    setParams(value: capnp.List<Calculator_Expression>): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    toString(): string { return "Calculator_Expression_Call_" + super.toString(); }
}
export enum Calculator_Expression_Which {
    LITERAL = 0,
    PREVIOUS_RESULT = 1,
    PARAMETER = 2,
    CALL = 3
}
export class Calculator_Expression extends __S {
    static readonly LITERAL = Calculator_Expression_Which.LITERAL;
    static readonly PREVIOUS_RESULT = Calculator_Expression_Which.PREVIOUS_RESULT;
    static readonly PARAMETER = Calculator_Expression_Which.PARAMETER;
    static readonly CALL = Calculator_Expression_Which.CALL;
    static readonly _capnp = { displayName: "Expression", id: "d438d7caf5548d15", size: new __O(16, 2) };
    getLiteral(): number {
        __S.testWhich("literal", __S.getUint16(8, this), 0, this);
        return __S.getFloat64(0, this);
    }
    isLiteral(): boolean { return __S.getUint16(8, this) === 0; }
    setLiteral(value: number): void {
        __S.setUint16(8, 0, this);
        __S.setFloat64(0, value, this);
    }
    getPreviousResult(): capnp.Interface {
        __S.testWhich("previousResult", __S.getUint16(8, this), 1, this);
        return __S.getPointerAs(0, capnp.Interface, this);
    }
    isPreviousResult(): boolean { return __S.getUint16(8, this) === 1; }
    setPreviousResult(value: capnp.Interface): void {
        __S.setUint16(8, 1, this);
        __S.copyFrom(value, __S.getPointer(0, this));
    }
    getParameter(): number {
        __S.testWhich("parameter", __S.getUint16(8, this), 2, this);
        return __S.getUint32(0, this);
    }
    isParameter(): boolean { return __S.getUint16(8, this) === 2; }
    setParameter(value: number): void {
        __S.setUint16(8, 2, this);
        __S.setUint32(0, value, this);
    }
    getCall(): Calculator_Expression_Call {
        __S.testWhich("call", __S.getUint16(8, this), 3, this);
        return __S.getAs(Calculator_Expression_Call, this);
    }
    initCall(): Calculator_Expression_Call {
        __S.setUint16(8, 3, this);
        return __S.getAs(Calculator_Expression_Call, this);
    }
    isCall(): boolean { return __S.getUint16(8, this) === 3; }
    setCall(): void { __S.setUint16(8, 3, this); }
    toString(): string { return "Calculator_Expression_" + super.toString(); }
    which(): Calculator_Expression_Which { return __S.getUint16(8, this); }
}
export class Calculator_Value extends __S {
    static readonly _capnp = { displayName: "Value", id: "c3e69d34d3ee48d2", size: new __O(0, 0) };
    toString(): string { return "Calculator_Value_" + super.toString(); }
}
export class Calculator_Function extends __S {
    static readonly _capnp = { displayName: "Function", id: "ede83a3d96840394", size: new __O(0, 0) };
    toString(): string { return "Calculator_Function_" + super.toString(); }
}
export enum Calculator_Operator {
    ADD,
    SUBTRACT,
    MULTIPLY,
    DIVIDE
}
export class Calculator extends __S {
    static readonly Expression = Calculator_Expression;
    static readonly Value = Calculator_Value;
    static readonly Function = Calculator_Function;
    static readonly Operator = Calculator_Operator;
    static readonly _capnp = { displayName: "Calculator", id: "97983392df35cc36", size: new __O(0, 0) };
    toString(): string { return "Calculator_" + super.toString(); }
}
Calculator_Expression_Call._Params = capnp.CompositeList(Calculator_Expression);
