/* tslint:disable */

/**
 * This file has been automatically generated by the [capnpc-ts utility](https://github.com/jdiaz5513/capnp-ts).
 */

import * as capnp from "capnp-ts";
import { ObjectSize as __O, Struct as __S, Interface as __I } from 'capnp-ts';
export const _capnpFileId = "f707573bf7bf8fda";
export class Rational extends __S {
    static readonly _capnp = { displayName: "Rational", id: "e600925993c23cf3", size: new __O(8, 0) };
    getNum(): number { return __S.getUint32(0, this); }
    setNum(value: number): void { __S.setUint32(0, value, this); }
    getDen(): number { return __S.getUint32(4, this); }
    setDen(value: number): void { __S.setUint32(4, value, this); }
    toString(): string { return "Rational_" + super.toString(); }
}
export class AudioFrame extends __S {
    static readonly _capnp = { displayName: "AudioFrame", id: "e2c181595b768329", size: new __O(16, 2) };
    getStreamId(): number { return __S.getUint32(8, this); }
    setStreamId(value: number): void { __S.setUint32(8, value, this); }
    adoptPts(value: capnp.Orphan<Rational>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownPts(): capnp.Orphan<Rational> { return __S.disown(this.getPts()); }
    getPts(): Rational { return __S.getStruct(1, Rational, this); }
    hasPts(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initPts(): Rational { return __S.initStructAt(1, Rational, this); }
    setPts(value: Rational): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    getNumSamples(): number { return __S.getUint32(0, this); }
    setNumSamples(value: number): void { __S.setUint32(0, value, this); }
    getChannels(): number { return __S.getUint16(4, this); }
    setChannels(value: number): void { __S.setUint16(4, value, this); }
    adoptData(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownData(): capnp.Orphan<capnp.Data> { return __S.disown(this.getData()); }
    getData(): capnp.Data { return __S.getData(0, this); }
    hasData(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initData(length: number): capnp.Data { return __S.initData(0, length, this); }
    setData(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "AudioFrame_" + super.toString(); }
}
export enum VideoFrame_PixelFormat {
    RGBA
}
export class VideoFrame extends __S {
    static readonly PixelFormat = VideoFrame_PixelFormat;
    static readonly _capnp = { displayName: "VideoFrame", id: "d0d3ae0869b4d05c", size: new __O(16, 2) };
    getStreamId(): number { return __S.getUint32(12, this); }
    setStreamId(value: number): void { __S.setUint32(12, value, this); }
    adoptPts(value: capnp.Orphan<Rational>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownPts(): capnp.Orphan<Rational> { return __S.disown(this.getPts()); }
    getPts(): Rational { return __S.getStruct(1, Rational, this); }
    hasPts(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initPts(): Rational { return __S.initStructAt(1, Rational, this); }
    setPts(value: Rational): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    getWidth(): number { return __S.getUint32(0, this); }
    setWidth(value: number): void { __S.setUint32(0, value, this); }
    getHeight(): number { return __S.getUint32(4, this); }
    setHeight(value: number): void { __S.setUint32(4, value, this); }
    getPixelFormat(): VideoFrame_PixelFormat { return __S.getUint16(8, this); }
    setPixelFormat(value: VideoFrame_PixelFormat): void { __S.setUint16(8, value, this); }
    adoptData(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownData(): capnp.Orphan<capnp.Data> { return __S.disown(this.getData()); }
    getData(): capnp.Data { return __S.getData(0, this); }
    hasData(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initData(length: number): capnp.Data { return __S.initData(0, length, this); }
    setData(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "VideoFrame_" + super.toString(); }
}
export enum Frame_Which {
    AUDIO_FRAME = 0,
    VIDEO_FRAME = 1
}
export class Frame extends __S {
    static readonly AUDIO_FRAME = Frame_Which.AUDIO_FRAME;
    static readonly VIDEO_FRAME = Frame_Which.VIDEO_FRAME;
    static readonly _capnp = { displayName: "Frame", id: "9a599bfe77132e2d", size: new __O(8, 1) };
    adoptAudioFrame(value: capnp.Orphan<AudioFrame>): void {
        __S.setUint16(0, 0, this);
        __S.adopt(value, __S.getPointer(0, this));
    }
    disownAudioFrame(): capnp.Orphan<AudioFrame> { return __S.disown(this.getAudioFrame()); }
    getAudioFrame(): AudioFrame {
        __S.testWhich("audioFrame", __S.getUint16(0, this), 0, this);
        return __S.getStruct(0, AudioFrame, this);
    }
    hasAudioFrame(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initAudioFrame(): AudioFrame {
        __S.setUint16(0, 0, this);
        return __S.initStructAt(0, AudioFrame, this);
    }
    isAudioFrame(): boolean { return __S.getUint16(0, this) === 0; }
    setAudioFrame(value: AudioFrame): void {
        __S.setUint16(0, 0, this);
        __S.copyFrom(value, __S.getPointer(0, this));
    }
    adoptVideoFrame(value: capnp.Orphan<VideoFrame>): void {
        __S.setUint16(0, 1, this);
        __S.adopt(value, __S.getPointer(0, this));
    }
    disownVideoFrame(): capnp.Orphan<VideoFrame> { return __S.disown(this.getVideoFrame()); }
    getVideoFrame(): VideoFrame {
        __S.testWhich("videoFrame", __S.getUint16(0, this), 1, this);
        return __S.getStruct(0, VideoFrame, this);
    }
    hasVideoFrame(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initVideoFrame(): VideoFrame {
        __S.setUint16(0, 1, this);
        return __S.initStructAt(0, VideoFrame, this);
    }
    isVideoFrame(): boolean { return __S.getUint16(0, this) === 1; }
    setVideoFrame(value: VideoFrame): void {
        __S.setUint16(0, 1, this);
        __S.copyFrom(value, __S.getPointer(0, this));
    }
    toString(): string { return "Frame_" + super.toString(); }
    which(): Frame_Which { return __S.getUint16(0, this); }
}
export class Frames extends __S {
    static readonly _capnp = { displayName: "Frames", id: "8983a81aef3335c6", size: new __O(0, 1) };
    static _Frames: capnp.ListCtor<Frame>;
    adoptFrames(value: capnp.Orphan<capnp.List<Frame>>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownFrames(): capnp.Orphan<capnp.List<Frame>> { return __S.disown(this.getFrames()); }
    getFrames(): capnp.List<Frame> { return __S.getList(0, Frames._Frames, this); }
    hasFrames(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initFrames(length: number): capnp.List<Frame> { return __S.initList(0, Frames._Frames, length, this); }
    setFrames(value: capnp.List<Frame>): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "Frames_" + super.toString(); }
}
Frames._Frames = capnp.CompositeList(Frame);
