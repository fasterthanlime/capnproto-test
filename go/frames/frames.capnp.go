// Code generated by capnpc-go. DO NOT EDIT.

package frames

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Rational struct{ capnp.Struct }

// Rational_TypeID is the unique identifier for the type Rational.
const Rational_TypeID = 0xe600925993c23cf3

func NewRational(s *capnp.Segment) (Rational, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Rational{st}, err
}

func NewRootRational(s *capnp.Segment) (Rational, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Rational{st}, err
}

func ReadRootRational(msg *capnp.Message) (Rational, error) {
	root, err := msg.RootPtr()
	return Rational{root.Struct()}, err
}

func (s Rational) String() string {
	str, _ := text.Marshal(0xe600925993c23cf3, s.Struct)
	return str
}

func (s Rational) Num() uint32 {
	return s.Struct.Uint32(0)
}

func (s Rational) SetNum(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s Rational) Den() uint32 {
	return s.Struct.Uint32(4)
}

func (s Rational) SetDen(v uint32) {
	s.Struct.SetUint32(4, v)
}

// Rational_List is a list of Rational.
type Rational_List struct{ capnp.List }

// NewRational creates a new list of Rational.
func NewRational_List(s *capnp.Segment, sz int32) (Rational_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Rational_List{l}, err
}

func (s Rational_List) At(i int) Rational { return Rational{s.List.Struct(i)} }

func (s Rational_List) Set(i int, v Rational) error { return s.List.SetStruct(i, v.Struct) }

func (s Rational_List) String() string {
	str, _ := text.MarshalList(0xe600925993c23cf3, s.List)
	return str
}

// Rational_Promise is a wrapper for a Rational promised by a client call.
type Rational_Promise struct{ *capnp.Pipeline }

func (p Rational_Promise) Struct() (Rational, error) {
	s, err := p.Pipeline.Struct()
	return Rational{s}, err
}

type AudioFrame struct{ capnp.Struct }

// AudioFrame_TypeID is the unique identifier for the type AudioFrame.
const AudioFrame_TypeID = 0xe2c181595b768329

func NewAudioFrame(s *capnp.Segment) (AudioFrame, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return AudioFrame{st}, err
}

func NewRootAudioFrame(s *capnp.Segment) (AudioFrame, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return AudioFrame{st}, err
}

func ReadRootAudioFrame(msg *capnp.Message) (AudioFrame, error) {
	root, err := msg.RootPtr()
	return AudioFrame{root.Struct()}, err
}

func (s AudioFrame) String() string {
	str, _ := text.Marshal(0xe2c181595b768329, s.Struct)
	return str
}

func (s AudioFrame) StreamId() uint32 {
	return s.Struct.Uint32(8)
}

func (s AudioFrame) SetStreamId(v uint32) {
	s.Struct.SetUint32(8, v)
}

func (s AudioFrame) Pts() (Rational, error) {
	p, err := s.Struct.Ptr(1)
	return Rational{Struct: p.Struct()}, err
}

func (s AudioFrame) HasPts() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s AudioFrame) SetPts(v Rational) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewPts sets the pts field to a newly
// allocated Rational struct, preferring placement in s's segment.
func (s AudioFrame) NewPts() (Rational, error) {
	ss, err := NewRational(s.Struct.Segment())
	if err != nil {
		return Rational{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s AudioFrame) NumSamples() uint32 {
	return s.Struct.Uint32(0)
}

func (s AudioFrame) SetNumSamples(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s AudioFrame) Channels() uint16 {
	return s.Struct.Uint16(4)
}

func (s AudioFrame) SetChannels(v uint16) {
	s.Struct.SetUint16(4, v)
}

func (s AudioFrame) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s AudioFrame) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AudioFrame) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// AudioFrame_List is a list of AudioFrame.
type AudioFrame_List struct{ capnp.List }

// NewAudioFrame creates a new list of AudioFrame.
func NewAudioFrame_List(s *capnp.Segment, sz int32) (AudioFrame_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return AudioFrame_List{l}, err
}

func (s AudioFrame_List) At(i int) AudioFrame { return AudioFrame{s.List.Struct(i)} }

func (s AudioFrame_List) Set(i int, v AudioFrame) error { return s.List.SetStruct(i, v.Struct) }

func (s AudioFrame_List) String() string {
	str, _ := text.MarshalList(0xe2c181595b768329, s.List)
	return str
}

// AudioFrame_Promise is a wrapper for a AudioFrame promised by a client call.
type AudioFrame_Promise struct{ *capnp.Pipeline }

func (p AudioFrame_Promise) Struct() (AudioFrame, error) {
	s, err := p.Pipeline.Struct()
	return AudioFrame{s}, err
}

func (p AudioFrame_Promise) Pts() Rational_Promise {
	return Rational_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type VideoFrame struct{ capnp.Struct }

// VideoFrame_TypeID is the unique identifier for the type VideoFrame.
const VideoFrame_TypeID = 0xd0d3ae0869b4d05c

func NewVideoFrame(s *capnp.Segment) (VideoFrame, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return VideoFrame{st}, err
}

func NewRootVideoFrame(s *capnp.Segment) (VideoFrame, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return VideoFrame{st}, err
}

func ReadRootVideoFrame(msg *capnp.Message) (VideoFrame, error) {
	root, err := msg.RootPtr()
	return VideoFrame{root.Struct()}, err
}

func (s VideoFrame) String() string {
	str, _ := text.Marshal(0xd0d3ae0869b4d05c, s.Struct)
	return str
}

func (s VideoFrame) StreamId() uint32 {
	return s.Struct.Uint32(12)
}

func (s VideoFrame) SetStreamId(v uint32) {
	s.Struct.SetUint32(12, v)
}

func (s VideoFrame) Pts() (Rational, error) {
	p, err := s.Struct.Ptr(1)
	return Rational{Struct: p.Struct()}, err
}

func (s VideoFrame) HasPts() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s VideoFrame) SetPts(v Rational) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewPts sets the pts field to a newly
// allocated Rational struct, preferring placement in s's segment.
func (s VideoFrame) NewPts() (Rational, error) {
	ss, err := NewRational(s.Struct.Segment())
	if err != nil {
		return Rational{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s VideoFrame) Width() uint32 {
	return s.Struct.Uint32(0)
}

func (s VideoFrame) SetWidth(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s VideoFrame) Height() uint32 {
	return s.Struct.Uint32(4)
}

func (s VideoFrame) SetHeight(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s VideoFrame) PixelFormat() VideoFrame_PixelFormat {
	return VideoFrame_PixelFormat(s.Struct.Uint16(8))
}

func (s VideoFrame) SetPixelFormat(v VideoFrame_PixelFormat) {
	s.Struct.SetUint16(8, uint16(v))
}

func (s VideoFrame) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s VideoFrame) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VideoFrame) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// VideoFrame_List is a list of VideoFrame.
type VideoFrame_List struct{ capnp.List }

// NewVideoFrame creates a new list of VideoFrame.
func NewVideoFrame_List(s *capnp.Segment, sz int32) (VideoFrame_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return VideoFrame_List{l}, err
}

func (s VideoFrame_List) At(i int) VideoFrame { return VideoFrame{s.List.Struct(i)} }

func (s VideoFrame_List) Set(i int, v VideoFrame) error { return s.List.SetStruct(i, v.Struct) }

func (s VideoFrame_List) String() string {
	str, _ := text.MarshalList(0xd0d3ae0869b4d05c, s.List)
	return str
}

// VideoFrame_Promise is a wrapper for a VideoFrame promised by a client call.
type VideoFrame_Promise struct{ *capnp.Pipeline }

func (p VideoFrame_Promise) Struct() (VideoFrame, error) {
	s, err := p.Pipeline.Struct()
	return VideoFrame{s}, err
}

func (p VideoFrame_Promise) Pts() Rational_Promise {
	return Rational_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type VideoFrame_PixelFormat uint16

// VideoFrame_PixelFormat_TypeID is the unique identifier for the type VideoFrame_PixelFormat.
const VideoFrame_PixelFormat_TypeID = 0xc4c6654a3e32b1ca

// Values of VideoFrame_PixelFormat.
const (
	VideoFrame_PixelFormat_rgba VideoFrame_PixelFormat = 0
)

// String returns the enum's constant name.
func (c VideoFrame_PixelFormat) String() string {
	switch c {
	case VideoFrame_PixelFormat_rgba:
		return "rgba"

	default:
		return ""
	}
}

// VideoFrame_PixelFormatFromString returns the enum value with a name,
// or the zero value if there's no such value.
func VideoFrame_PixelFormatFromString(c string) VideoFrame_PixelFormat {
	switch c {
	case "rgba":
		return VideoFrame_PixelFormat_rgba

	default:
		return 0
	}
}

type VideoFrame_PixelFormat_List struct{ capnp.List }

func NewVideoFrame_PixelFormat_List(s *capnp.Segment, sz int32) (VideoFrame_PixelFormat_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return VideoFrame_PixelFormat_List{l.List}, err
}

func (l VideoFrame_PixelFormat_List) At(i int) VideoFrame_PixelFormat {
	ul := capnp.UInt16List{List: l.List}
	return VideoFrame_PixelFormat(ul.At(i))
}

func (l VideoFrame_PixelFormat_List) Set(i int, v VideoFrame_PixelFormat) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Frame struct{ capnp.Struct }
type Frame_Which uint16

const (
	Frame_Which_audioFrame Frame_Which = 0
	Frame_Which_videoFrame Frame_Which = 1
)

func (w Frame_Which) String() string {
	const s = "audioFramevideoFrame"
	switch w {
	case Frame_Which_audioFrame:
		return s[0:10]
	case Frame_Which_videoFrame:
		return s[10:20]

	}
	return "Frame_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Frame_TypeID is the unique identifier for the type Frame.
const Frame_TypeID = 0x9a599bfe77132e2d

func NewFrame(s *capnp.Segment) (Frame, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Frame{st}, err
}

func NewRootFrame(s *capnp.Segment) (Frame, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Frame{st}, err
}

func ReadRootFrame(msg *capnp.Message) (Frame, error) {
	root, err := msg.RootPtr()
	return Frame{root.Struct()}, err
}

func (s Frame) String() string {
	str, _ := text.Marshal(0x9a599bfe77132e2d, s.Struct)
	return str
}

func (s Frame) Which() Frame_Which {
	return Frame_Which(s.Struct.Uint16(0))
}
func (s Frame) AudioFrame() (AudioFrame, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != audioFrame")
	}
	p, err := s.Struct.Ptr(0)
	return AudioFrame{Struct: p.Struct()}, err
}

func (s Frame) HasAudioFrame() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Frame) SetAudioFrame(v AudioFrame) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAudioFrame sets the audioFrame field to a newly
// allocated AudioFrame struct, preferring placement in s's segment.
func (s Frame) NewAudioFrame() (AudioFrame, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewAudioFrame(s.Struct.Segment())
	if err != nil {
		return AudioFrame{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Frame) VideoFrame() (VideoFrame, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != videoFrame")
	}
	p, err := s.Struct.Ptr(0)
	return VideoFrame{Struct: p.Struct()}, err
}

func (s Frame) HasVideoFrame() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Frame) SetVideoFrame(v VideoFrame) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVideoFrame sets the videoFrame field to a newly
// allocated VideoFrame struct, preferring placement in s's segment.
func (s Frame) NewVideoFrame() (VideoFrame, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewVideoFrame(s.Struct.Segment())
	if err != nil {
		return VideoFrame{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Frame_List is a list of Frame.
type Frame_List struct{ capnp.List }

// NewFrame creates a new list of Frame.
func NewFrame_List(s *capnp.Segment, sz int32) (Frame_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Frame_List{l}, err
}

func (s Frame_List) At(i int) Frame { return Frame{s.List.Struct(i)} }

func (s Frame_List) Set(i int, v Frame) error { return s.List.SetStruct(i, v.Struct) }

func (s Frame_List) String() string {
	str, _ := text.MarshalList(0x9a599bfe77132e2d, s.List)
	return str
}

// Frame_Promise is a wrapper for a Frame promised by a client call.
type Frame_Promise struct{ *capnp.Pipeline }

func (p Frame_Promise) Struct() (Frame, error) {
	s, err := p.Pipeline.Struct()
	return Frame{s}, err
}

func (p Frame_Promise) AudioFrame() AudioFrame_Promise {
	return AudioFrame_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Frame_Promise) VideoFrame() VideoFrame_Promise {
	return VideoFrame_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Frames struct{ capnp.Struct }

// Frames_TypeID is the unique identifier for the type Frames.
const Frames_TypeID = 0x8983a81aef3335c6

func NewFrames(s *capnp.Segment) (Frames, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Frames{st}, err
}

func NewRootFrames(s *capnp.Segment) (Frames, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Frames{st}, err
}

func ReadRootFrames(msg *capnp.Message) (Frames, error) {
	root, err := msg.RootPtr()
	return Frames{root.Struct()}, err
}

func (s Frames) String() string {
	str, _ := text.Marshal(0x8983a81aef3335c6, s.Struct)
	return str
}

func (s Frames) Frames() (Frame_List, error) {
	p, err := s.Struct.Ptr(0)
	return Frame_List{List: p.List()}, err
}

func (s Frames) HasFrames() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Frames) SetFrames(v Frame_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewFrames sets the frames field to a newly
// allocated Frame_List, preferring placement in s's segment.
func (s Frames) NewFrames(n int32) (Frame_List, error) {
	l, err := NewFrame_List(s.Struct.Segment(), n)
	if err != nil {
		return Frame_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Frames_List is a list of Frames.
type Frames_List struct{ capnp.List }

// NewFrames creates a new list of Frames.
func NewFrames_List(s *capnp.Segment, sz int32) (Frames_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Frames_List{l}, err
}

func (s Frames_List) At(i int) Frames { return Frames{s.List.Struct(i)} }

func (s Frames_List) Set(i int, v Frames) error { return s.List.SetStruct(i, v.Struct) }

func (s Frames_List) String() string {
	str, _ := text.MarshalList(0x8983a81aef3335c6, s.List)
	return str
}

// Frames_Promise is a wrapper for a Frames promised by a client call.
type Frames_Promise struct{ *capnp.Pipeline }

func (p Frames_Promise) Struct() (Frames, error) {
	s, err := p.Pipeline.Struct()
	return Frames{s}, err
}

const schema_f707573bf7bf8fda = "x\xda\x94\x93AH\\W\x18\x85\xcf\xb9\xf7M\xdf," +
	":\x9dy\xbc\x81J7\x03\x83\x8b*(\xea\xb4\x1b\xab" +
	"\xb5]((\x14\xbc-Tl\xbby:\xaf\xce\xc0\xbc" +
	"q\x98\x19\x9d.\xdaE\xb1\x05\xbb(\xb5\xad\x85j-" +
	"\xc4\xa0\xa0\x10\x83\x09\x09d\x11\x90H\"$\x10\x10B" +
	"\x16\x09d\x93E\xb6Yd\xe1\xce\x1b\xee\x9b\x19gb" +
	"\xb2\xc9\xee\xce\x7f\xcf\xfb\xef9\xdf\xffO\xdf?\xfcL" +
	"\xf4Gj\x12P\x1fF\xde\xd1G\x1fg\x9e\x7f\xb0\xb3" +
	"\xf4\x1b\x9c\x18\xf5\xe3?\x0eN>\x99\xb2O\x10\xa1\x0d" +
	"\xb8\x9b\xbc\xe8\xee\x86\xa7m\x8e\x80\xba\xa7\xd7\xad\x9d\xfe" +
	"7\xbd\x0e\x15c\x9bx\x94\xb6\x00\xdc\x87\\w\x9f\x84" +
	"\xeaG\xac\x81\xfa\xde\x95\x81O'\xfc\xa3\xdbp:\x84" +
	"\xfe\xee\xf8Z>z\xf9\xc11\xc0\xcc\xb0H\xd3\xfdB" +
	"\x18\xe5\xb8H\x81\xadK\x15\xa3h3\x11J\x86\xc5\xa1" +
	";*\xde\x072JL\x11\xd4]K\x8b\xdfN\xff|" +
	"\xeb\xe9\x1b\xd5\xdb\xf2\xd0\xdd\x936\x90\xd9\x95)\x82\x07" +
	"/\x86\x0e\xff\x9e\xfe\xeb\xd9\xab\x8e-#\xbdc]u" +
	"\xef\x87\xa7\xbbV\x0d=\xfa\xfb\xb2\x17\xf8\x95\xdeYz" +
	"\xa5bip\xac\xec\xd9\x81_\x99$\x95%-\xc0\"" +
	"\xe0\xc4\x06\x01\x15\x95T\x9d\x82#u=\xdf\x03'%" +
	"\x99h\xd1\x01M\xf1\xf5~2\xf0M\xbb\xa8\xb4\xde\xd5" +
	":\xec\xd7\xf5\x8d\x99\x82\xa4\xfaH0\xc6S\x9d\xa4\xa9" +
	"\xf6\x9bj\x9f\xa4\x1a\x12\xd4\xdeB6??V\xf6 " +
	"\x03\x9f\x89Vx\x90\x09P/\xe6\xb3~\xdbu\x1b\xe6" +
	"\xf0\xba\xe9A\x86\x1e\xben\x88\x03\xbfw2\xff\x83_" +
	"\x18\x9b/\xdb\x81W\x0d3R\x00N\xa4\x1b\x88\x97\xe7" +
	"f\xbc\xb3\x0f\xc5\xb9\x0f\xa1,\xb6\x8f\x963\xba\xd9\x0a" +
	"\xa6\x97\xea\x90\x16E\x18nm\x00P\xab\x92\xea\x82\xa0" +
	"#Y\xcf\xf6\xbf!\xf8\xaf\xa4\xda\x12d$\x19\xbe\xba" +
	"\xd9\x0d\xa8\x0dI\xb5#\xe8XV\x92\x12p\xb6g\x00" +
	"\xb5%\xa9\xf6\x05\x132I\x0bp\xf6&\x00uIR" +
	"\xdd\x10t\xc8$#\x80s=\x0d\xa8}IuS0" +
	"U\xcbg\xab9F!\x18\x05Gr~~.Wm" +
	"\xfe\x8cg\xbd\xaa\xc7\x18\x04c\xa0.\xb5\xbbf\xbc\x15" +
	"\x09d\x1c\xd4\x95j\xd9\xf7\x82\xf1,\x80f\x03\xbbT" +
	"\xad0\xd1\xdc\xa8s\x84\xeb\xa0>oL+\xf0a\xa8" +
	"&\xcf`\xfcdf\xfa\xa3\xa4Z60D\x1d\xc6\xaf" +
	"&\xcf/\x92jE\x90V\x1d\xc6\xef\x06\xc6\xb2\xa4Z" +
	"\x15L\x88:\x8b?\x8dnERm4r\x1b\x18k" +
	"\xe9\x16^]\\\x08\xbe\xf2\x82R\x01\xd2\xaf4\xed\xea" +
	"\xd9\x9cW,\xfa\x85\x8a\x89`C\xd0>\xcf\xe0m3" +
	"\xd67\xf9K\xaf\x9a\xca\xcf\x17\xbdBc\x99\x1b\xff\x8d" +
	".\xe3\xa7SR\xf55L\x9abO\xba\xb5\xe0vq" +
	"!8{&\xeb\x17\x9b\xe7\x97\x01\x00\x00\xff\xff\xd0S" +
	"!\xd0"

func init() {
	schemas.Register(schema_f707573bf7bf8fda,
		0x8983a81aef3335c6,
		0x9a599bfe77132e2d,
		0xc4c6654a3e32b1ca,
		0xd0d3ae0869b4d05c,
		0xe2c181595b768329,
		0xe600925993c23cf3)
}
