// Code generated by capnpc-go. DO NOT EDIT.

package calculator

import (
	context "golang.org/x/net/context"
	math "math"
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Calculator struct{ Client capnp.Client }

// Calculator_TypeID is the unique identifier for the type Calculator.
const Calculator_TypeID = 0x97983392df35cc36

func (c Calculator) Evaluate(ctx context.Context, params func(Calculator_evaluate_Params) error, opts ...capnp.CallOption) Calculator_evaluate_Results_Promise {
	if c.Client == nil {
		return Calculator_evaluate_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x97983392df35cc36,
			MethodID:      0,
			InterfaceName: "calculator.capnp:Calculator",
			MethodName:    "evaluate",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Calculator_evaluate_Params{Struct: s}) }
	}
	return Calculator_evaluate_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Calculator) DefFunction(ctx context.Context, params func(Calculator_defFunction_Params) error, opts ...capnp.CallOption) Calculator_defFunction_Results_Promise {
	if c.Client == nil {
		return Calculator_defFunction_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x97983392df35cc36,
			MethodID:      1,
			InterfaceName: "calculator.capnp:Calculator",
			MethodName:    "defFunction",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Calculator_defFunction_Params{Struct: s}) }
	}
	return Calculator_defFunction_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Calculator) GetOperator(ctx context.Context, params func(Calculator_getOperator_Params) error, opts ...capnp.CallOption) Calculator_getOperator_Results_Promise {
	if c.Client == nil {
		return Calculator_getOperator_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x97983392df35cc36,
			MethodID:      2,
			InterfaceName: "calculator.capnp:Calculator",
			MethodName:    "getOperator",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Calculator_getOperator_Params{Struct: s}) }
	}
	return Calculator_getOperator_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Calculator_Server interface {
	Evaluate(Calculator_evaluate) error

	DefFunction(Calculator_defFunction) error

	GetOperator(Calculator_getOperator) error
}

func Calculator_ServerToClient(s Calculator_Server) Calculator {
	c, _ := s.(server.Closer)
	return Calculator{Client: server.New(Calculator_Methods(nil, s), c)}
}

func Calculator_Methods(methods []server.Method, s Calculator_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x97983392df35cc36,
			MethodID:      0,
			InterfaceName: "calculator.capnp:Calculator",
			MethodName:    "evaluate",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Calculator_evaluate{c, opts, Calculator_evaluate_Params{Struct: p}, Calculator_evaluate_Results{Struct: r}}
			return s.Evaluate(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x97983392df35cc36,
			MethodID:      1,
			InterfaceName: "calculator.capnp:Calculator",
			MethodName:    "defFunction",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Calculator_defFunction{c, opts, Calculator_defFunction_Params{Struct: p}, Calculator_defFunction_Results{Struct: r}}
			return s.DefFunction(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x97983392df35cc36,
			MethodID:      2,
			InterfaceName: "calculator.capnp:Calculator",
			MethodName:    "getOperator",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Calculator_getOperator{c, opts, Calculator_getOperator_Params{Struct: p}, Calculator_getOperator_Results{Struct: r}}
			return s.GetOperator(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// Calculator_evaluate holds the arguments for a server call to Calculator.evaluate.
type Calculator_evaluate struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Calculator_evaluate_Params
	Results Calculator_evaluate_Results
}

// Calculator_defFunction holds the arguments for a server call to Calculator.defFunction.
type Calculator_defFunction struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Calculator_defFunction_Params
	Results Calculator_defFunction_Results
}

// Calculator_getOperator holds the arguments for a server call to Calculator.getOperator.
type Calculator_getOperator struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Calculator_getOperator_Params
	Results Calculator_getOperator_Results
}

type Calculator_Expression struct{ capnp.Struct }
type Calculator_Expression_call Calculator_Expression
type Calculator_Expression_Which uint16

const (
	Calculator_Expression_Which_literal        Calculator_Expression_Which = 0
	Calculator_Expression_Which_previousResult Calculator_Expression_Which = 1
	Calculator_Expression_Which_parameter      Calculator_Expression_Which = 2
	Calculator_Expression_Which_call           Calculator_Expression_Which = 3
)

func (w Calculator_Expression_Which) String() string {
	const s = "literalpreviousResultparametercall"
	switch w {
	case Calculator_Expression_Which_literal:
		return s[0:7]
	case Calculator_Expression_Which_previousResult:
		return s[7:21]
	case Calculator_Expression_Which_parameter:
		return s[21:30]
	case Calculator_Expression_Which_call:
		return s[30:34]

	}
	return "Calculator_Expression_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Calculator_Expression_TypeID is the unique identifier for the type Calculator_Expression.
const Calculator_Expression_TypeID = 0xd438d7caf5548d15

func NewCalculator_Expression(s *capnp.Segment) (Calculator_Expression, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Calculator_Expression{st}, err
}

func NewRootCalculator_Expression(s *capnp.Segment) (Calculator_Expression, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Calculator_Expression{st}, err
}

func ReadRootCalculator_Expression(msg *capnp.Message) (Calculator_Expression, error) {
	root, err := msg.RootPtr()
	return Calculator_Expression{root.Struct()}, err
}

func (s Calculator_Expression) String() string {
	str, _ := text.Marshal(0xd438d7caf5548d15, s.Struct)
	return str
}

func (s Calculator_Expression) Which() Calculator_Expression_Which {
	return Calculator_Expression_Which(s.Struct.Uint16(8))
}
func (s Calculator_Expression) Literal() float64 {
	if s.Struct.Uint16(8) != 0 {
		panic("Which() != literal")
	}
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Calculator_Expression) SetLiteral(v float64) {
	s.Struct.SetUint16(8, 0)
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Calculator_Expression) PreviousResult() Calculator_Value {
	if s.Struct.Uint16(8) != 1 {
		panic("Which() != previousResult")
	}
	p, _ := s.Struct.Ptr(0)
	return Calculator_Value{Client: p.Interface().Client()}
}

func (s Calculator_Expression) HasPreviousResult() bool {
	if s.Struct.Uint16(8) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Calculator_Expression) SetPreviousResult(v Calculator_Value) error {
	s.Struct.SetUint16(8, 1)
	if v.Client == nil {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Calculator_Expression) Parameter() uint32 {
	if s.Struct.Uint16(8) != 2 {
		panic("Which() != parameter")
	}
	return s.Struct.Uint32(0)
}

func (s Calculator_Expression) SetParameter(v uint32) {
	s.Struct.SetUint16(8, 2)
	s.Struct.SetUint32(0, v)
}

func (s Calculator_Expression) Call() Calculator_Expression_call { return Calculator_Expression_call(s) }

func (s Calculator_Expression) SetCall() {
	s.Struct.SetUint16(8, 3)
}

func (s Calculator_Expression_call) Function() Calculator_Function {
	p, _ := s.Struct.Ptr(0)
	return Calculator_Function{Client: p.Interface().Client()}
}

func (s Calculator_Expression_call) HasFunction() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Calculator_Expression_call) SetFunction(v Calculator_Function) error {
	if v.Client == nil {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Calculator_Expression_call) Params() (Calculator_Expression_List, error) {
	p, err := s.Struct.Ptr(1)
	return Calculator_Expression_List{List: p.List()}, err
}

func (s Calculator_Expression_call) HasParams() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Calculator_Expression_call) SetParams(v Calculator_Expression_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewParams sets the params field to a newly
// allocated Calculator_Expression_List, preferring placement in s's segment.
func (s Calculator_Expression_call) NewParams(n int32) (Calculator_Expression_List, error) {
	l, err := NewCalculator_Expression_List(s.Struct.Segment(), n)
	if err != nil {
		return Calculator_Expression_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Calculator_Expression_List is a list of Calculator_Expression.
type Calculator_Expression_List struct{ capnp.List }

// NewCalculator_Expression creates a new list of Calculator_Expression.
func NewCalculator_Expression_List(s *capnp.Segment, sz int32) (Calculator_Expression_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return Calculator_Expression_List{l}, err
}

func (s Calculator_Expression_List) At(i int) Calculator_Expression {
	return Calculator_Expression{s.List.Struct(i)}
}

func (s Calculator_Expression_List) Set(i int, v Calculator_Expression) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Calculator_Expression_List) String() string {
	str, _ := text.MarshalList(0xd438d7caf5548d15, s.List)
	return str
}

// Calculator_Expression_Promise is a wrapper for a Calculator_Expression promised by a client call.
type Calculator_Expression_Promise struct{ *capnp.Pipeline }

func (p Calculator_Expression_Promise) Struct() (Calculator_Expression, error) {
	s, err := p.Pipeline.Struct()
	return Calculator_Expression{s}, err
}

func (p Calculator_Expression_Promise) PreviousResult() Calculator_Value {
	return Calculator_Value{Client: p.Pipeline.GetPipeline(0).Client()}
}

func (p Calculator_Expression_Promise) Call() Calculator_Expression_call_Promise {
	return Calculator_Expression_call_Promise{p.Pipeline}
}

// Calculator_Expression_call_Promise is a wrapper for a Calculator_Expression_call promised by a client call.
type Calculator_Expression_call_Promise struct{ *capnp.Pipeline }

func (p Calculator_Expression_call_Promise) Struct() (Calculator_Expression_call, error) {
	s, err := p.Pipeline.Struct()
	return Calculator_Expression_call{s}, err
}

func (p Calculator_Expression_call_Promise) Function() Calculator_Function {
	return Calculator_Function{Client: p.Pipeline.GetPipeline(0).Client()}
}

type Calculator_Value struct{ Client capnp.Client }

// Calculator_Value_TypeID is the unique identifier for the type Calculator_Value.
const Calculator_Value_TypeID = 0xc3e69d34d3ee48d2

func (c Calculator_Value) Read(ctx context.Context, params func(Calculator_Value_read_Params) error, opts ...capnp.CallOption) Calculator_Value_read_Results_Promise {
	if c.Client == nil {
		return Calculator_Value_read_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xc3e69d34d3ee48d2,
			MethodID:      0,
			InterfaceName: "calculator.capnp:Calculator.Value",
			MethodName:    "read",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Calculator_Value_read_Params{Struct: s}) }
	}
	return Calculator_Value_read_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Calculator_Value_Server interface {
	Read(Calculator_Value_read) error
}

func Calculator_Value_ServerToClient(s Calculator_Value_Server) Calculator_Value {
	c, _ := s.(server.Closer)
	return Calculator_Value{Client: server.New(Calculator_Value_Methods(nil, s), c)}
}

func Calculator_Value_Methods(methods []server.Method, s Calculator_Value_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc3e69d34d3ee48d2,
			MethodID:      0,
			InterfaceName: "calculator.capnp:Calculator.Value",
			MethodName:    "read",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Calculator_Value_read{c, opts, Calculator_Value_read_Params{Struct: p}, Calculator_Value_read_Results{Struct: r}}
			return s.Read(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	return methods
}

// Calculator_Value_read holds the arguments for a server call to Calculator_Value.read.
type Calculator_Value_read struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Calculator_Value_read_Params
	Results Calculator_Value_read_Results
}

type Calculator_Value_read_Params struct{ capnp.Struct }

// Calculator_Value_read_Params_TypeID is the unique identifier for the type Calculator_Value_read_Params.
const Calculator_Value_read_Params_TypeID = 0xd3532574d58db558

func NewCalculator_Value_read_Params(s *capnp.Segment) (Calculator_Value_read_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Calculator_Value_read_Params{st}, err
}

func NewRootCalculator_Value_read_Params(s *capnp.Segment) (Calculator_Value_read_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Calculator_Value_read_Params{st}, err
}

func ReadRootCalculator_Value_read_Params(msg *capnp.Message) (Calculator_Value_read_Params, error) {
	root, err := msg.RootPtr()
	return Calculator_Value_read_Params{root.Struct()}, err
}

func (s Calculator_Value_read_Params) String() string {
	str, _ := text.Marshal(0xd3532574d58db558, s.Struct)
	return str
}

// Calculator_Value_read_Params_List is a list of Calculator_Value_read_Params.
type Calculator_Value_read_Params_List struct{ capnp.List }

// NewCalculator_Value_read_Params creates a new list of Calculator_Value_read_Params.
func NewCalculator_Value_read_Params_List(s *capnp.Segment, sz int32) (Calculator_Value_read_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Calculator_Value_read_Params_List{l}, err
}

func (s Calculator_Value_read_Params_List) At(i int) Calculator_Value_read_Params {
	return Calculator_Value_read_Params{s.List.Struct(i)}
}

func (s Calculator_Value_read_Params_List) Set(i int, v Calculator_Value_read_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Calculator_Value_read_Params_List) String() string {
	str, _ := text.MarshalList(0xd3532574d58db558, s.List)
	return str
}

// Calculator_Value_read_Params_Promise is a wrapper for a Calculator_Value_read_Params promised by a client call.
type Calculator_Value_read_Params_Promise struct{ *capnp.Pipeline }

func (p Calculator_Value_read_Params_Promise) Struct() (Calculator_Value_read_Params, error) {
	s, err := p.Pipeline.Struct()
	return Calculator_Value_read_Params{s}, err
}

type Calculator_Value_read_Results struct{ capnp.Struct }

// Calculator_Value_read_Results_TypeID is the unique identifier for the type Calculator_Value_read_Results.
const Calculator_Value_read_Results_TypeID = 0xe6be6723122ae822

func NewCalculator_Value_read_Results(s *capnp.Segment) (Calculator_Value_read_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Calculator_Value_read_Results{st}, err
}

func NewRootCalculator_Value_read_Results(s *capnp.Segment) (Calculator_Value_read_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Calculator_Value_read_Results{st}, err
}

func ReadRootCalculator_Value_read_Results(msg *capnp.Message) (Calculator_Value_read_Results, error) {
	root, err := msg.RootPtr()
	return Calculator_Value_read_Results{root.Struct()}, err
}

func (s Calculator_Value_read_Results) String() string {
	str, _ := text.Marshal(0xe6be6723122ae822, s.Struct)
	return str
}

func (s Calculator_Value_read_Results) Value() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Calculator_Value_read_Results) SetValue(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

// Calculator_Value_read_Results_List is a list of Calculator_Value_read_Results.
type Calculator_Value_read_Results_List struct{ capnp.List }

// NewCalculator_Value_read_Results creates a new list of Calculator_Value_read_Results.
func NewCalculator_Value_read_Results_List(s *capnp.Segment, sz int32) (Calculator_Value_read_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Calculator_Value_read_Results_List{l}, err
}

func (s Calculator_Value_read_Results_List) At(i int) Calculator_Value_read_Results {
	return Calculator_Value_read_Results{s.List.Struct(i)}
}

func (s Calculator_Value_read_Results_List) Set(i int, v Calculator_Value_read_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Calculator_Value_read_Results_List) String() string {
	str, _ := text.MarshalList(0xe6be6723122ae822, s.List)
	return str
}

// Calculator_Value_read_Results_Promise is a wrapper for a Calculator_Value_read_Results promised by a client call.
type Calculator_Value_read_Results_Promise struct{ *capnp.Pipeline }

func (p Calculator_Value_read_Results_Promise) Struct() (Calculator_Value_read_Results, error) {
	s, err := p.Pipeline.Struct()
	return Calculator_Value_read_Results{s}, err
}

type Calculator_Function struct{ Client capnp.Client }

// Calculator_Function_TypeID is the unique identifier for the type Calculator_Function.
const Calculator_Function_TypeID = 0xede83a3d96840394

func (c Calculator_Function) Call(ctx context.Context, params func(Calculator_Function_call_Params) error, opts ...capnp.CallOption) Calculator_Function_call_Results_Promise {
	if c.Client == nil {
		return Calculator_Function_call_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xede83a3d96840394,
			MethodID:      0,
			InterfaceName: "calculator.capnp:Calculator.Function",
			MethodName:    "call",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Calculator_Function_call_Params{Struct: s}) }
	}
	return Calculator_Function_call_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Calculator_Function_Server interface {
	Call(Calculator_Function_call) error
}

func Calculator_Function_ServerToClient(s Calculator_Function_Server) Calculator_Function {
	c, _ := s.(server.Closer)
	return Calculator_Function{Client: server.New(Calculator_Function_Methods(nil, s), c)}
}

func Calculator_Function_Methods(methods []server.Method, s Calculator_Function_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xede83a3d96840394,
			MethodID:      0,
			InterfaceName: "calculator.capnp:Calculator.Function",
			MethodName:    "call",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Calculator_Function_call{c, opts, Calculator_Function_call_Params{Struct: p}, Calculator_Function_call_Results{Struct: r}}
			return s.Call(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	return methods
}

// Calculator_Function_call holds the arguments for a server call to Calculator_Function.call.
type Calculator_Function_call struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Calculator_Function_call_Params
	Results Calculator_Function_call_Results
}

type Calculator_Function_call_Params struct{ capnp.Struct }

// Calculator_Function_call_Params_TypeID is the unique identifier for the type Calculator_Function_call_Params.
const Calculator_Function_call_Params_TypeID = 0xb19160df70b87717

func NewCalculator_Function_call_Params(s *capnp.Segment) (Calculator_Function_call_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Calculator_Function_call_Params{st}, err
}

func NewRootCalculator_Function_call_Params(s *capnp.Segment) (Calculator_Function_call_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Calculator_Function_call_Params{st}, err
}

func ReadRootCalculator_Function_call_Params(msg *capnp.Message) (Calculator_Function_call_Params, error) {
	root, err := msg.RootPtr()
	return Calculator_Function_call_Params{root.Struct()}, err
}

func (s Calculator_Function_call_Params) String() string {
	str, _ := text.Marshal(0xb19160df70b87717, s.Struct)
	return str
}

func (s Calculator_Function_call_Params) Params() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.Float64List{List: p.List()}, err
}

func (s Calculator_Function_call_Params) HasParams() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Calculator_Function_call_Params) SetParams(v capnp.Float64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewParams sets the params field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calculator_Function_call_Params) NewParams(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Calculator_Function_call_Params_List is a list of Calculator_Function_call_Params.
type Calculator_Function_call_Params_List struct{ capnp.List }

// NewCalculator_Function_call_Params creates a new list of Calculator_Function_call_Params.
func NewCalculator_Function_call_Params_List(s *capnp.Segment, sz int32) (Calculator_Function_call_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Calculator_Function_call_Params_List{l}, err
}

func (s Calculator_Function_call_Params_List) At(i int) Calculator_Function_call_Params {
	return Calculator_Function_call_Params{s.List.Struct(i)}
}

func (s Calculator_Function_call_Params_List) Set(i int, v Calculator_Function_call_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Calculator_Function_call_Params_List) String() string {
	str, _ := text.MarshalList(0xb19160df70b87717, s.List)
	return str
}

// Calculator_Function_call_Params_Promise is a wrapper for a Calculator_Function_call_Params promised by a client call.
type Calculator_Function_call_Params_Promise struct{ *capnp.Pipeline }

func (p Calculator_Function_call_Params_Promise) Struct() (Calculator_Function_call_Params, error) {
	s, err := p.Pipeline.Struct()
	return Calculator_Function_call_Params{s}, err
}

type Calculator_Function_call_Results struct{ capnp.Struct }

// Calculator_Function_call_Results_TypeID is the unique identifier for the type Calculator_Function_call_Results.
const Calculator_Function_call_Results_TypeID = 0xc0e0abf76914dead

func NewCalculator_Function_call_Results(s *capnp.Segment) (Calculator_Function_call_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Calculator_Function_call_Results{st}, err
}

func NewRootCalculator_Function_call_Results(s *capnp.Segment) (Calculator_Function_call_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Calculator_Function_call_Results{st}, err
}

func ReadRootCalculator_Function_call_Results(msg *capnp.Message) (Calculator_Function_call_Results, error) {
	root, err := msg.RootPtr()
	return Calculator_Function_call_Results{root.Struct()}, err
}

func (s Calculator_Function_call_Results) String() string {
	str, _ := text.Marshal(0xc0e0abf76914dead, s.Struct)
	return str
}

func (s Calculator_Function_call_Results) Value() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Calculator_Function_call_Results) SetValue(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

// Calculator_Function_call_Results_List is a list of Calculator_Function_call_Results.
type Calculator_Function_call_Results_List struct{ capnp.List }

// NewCalculator_Function_call_Results creates a new list of Calculator_Function_call_Results.
func NewCalculator_Function_call_Results_List(s *capnp.Segment, sz int32) (Calculator_Function_call_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Calculator_Function_call_Results_List{l}, err
}

func (s Calculator_Function_call_Results_List) At(i int) Calculator_Function_call_Results {
	return Calculator_Function_call_Results{s.List.Struct(i)}
}

func (s Calculator_Function_call_Results_List) Set(i int, v Calculator_Function_call_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Calculator_Function_call_Results_List) String() string {
	str, _ := text.MarshalList(0xc0e0abf76914dead, s.List)
	return str
}

// Calculator_Function_call_Results_Promise is a wrapper for a Calculator_Function_call_Results promised by a client call.
type Calculator_Function_call_Results_Promise struct{ *capnp.Pipeline }

func (p Calculator_Function_call_Results_Promise) Struct() (Calculator_Function_call_Results, error) {
	s, err := p.Pipeline.Struct()
	return Calculator_Function_call_Results{s}, err
}

type Calculator_Operator uint16

// Calculator_Operator_TypeID is the unique identifier for the type Calculator_Operator.
const Calculator_Operator_TypeID = 0x8793407861e6dfe6

// Values of Calculator_Operator.
const (
	Calculator_Operator_add      Calculator_Operator = 0
	Calculator_Operator_subtract Calculator_Operator = 1
	Calculator_Operator_multiply Calculator_Operator = 2
	Calculator_Operator_divide   Calculator_Operator = 3
)

// String returns the enum's constant name.
func (c Calculator_Operator) String() string {
	switch c {
	case Calculator_Operator_add:
		return "add"
	case Calculator_Operator_subtract:
		return "subtract"
	case Calculator_Operator_multiply:
		return "multiply"
	case Calculator_Operator_divide:
		return "divide"

	default:
		return ""
	}
}

// Calculator_OperatorFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Calculator_OperatorFromString(c string) Calculator_Operator {
	switch c {
	case "add":
		return Calculator_Operator_add
	case "subtract":
		return Calculator_Operator_subtract
	case "multiply":
		return Calculator_Operator_multiply
	case "divide":
		return Calculator_Operator_divide

	default:
		return 0
	}
}

type Calculator_Operator_List struct{ capnp.List }

func NewCalculator_Operator_List(s *capnp.Segment, sz int32) (Calculator_Operator_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Calculator_Operator_List{l.List}, err
}

func (l Calculator_Operator_List) At(i int) Calculator_Operator {
	ul := capnp.UInt16List{List: l.List}
	return Calculator_Operator(ul.At(i))
}

func (l Calculator_Operator_List) Set(i int, v Calculator_Operator) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Calculator_evaluate_Params struct{ capnp.Struct }

// Calculator_evaluate_Params_TypeID is the unique identifier for the type Calculator_evaluate_Params.
const Calculator_evaluate_Params_TypeID = 0xbb0eaae1557a36d4

func NewCalculator_evaluate_Params(s *capnp.Segment) (Calculator_evaluate_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Calculator_evaluate_Params{st}, err
}

func NewRootCalculator_evaluate_Params(s *capnp.Segment) (Calculator_evaluate_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Calculator_evaluate_Params{st}, err
}

func ReadRootCalculator_evaluate_Params(msg *capnp.Message) (Calculator_evaluate_Params, error) {
	root, err := msg.RootPtr()
	return Calculator_evaluate_Params{root.Struct()}, err
}

func (s Calculator_evaluate_Params) String() string {
	str, _ := text.Marshal(0xbb0eaae1557a36d4, s.Struct)
	return str
}

func (s Calculator_evaluate_Params) Expression() (Calculator_Expression, error) {
	p, err := s.Struct.Ptr(0)
	return Calculator_Expression{Struct: p.Struct()}, err
}

func (s Calculator_evaluate_Params) HasExpression() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Calculator_evaluate_Params) SetExpression(v Calculator_Expression) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewExpression sets the expression field to a newly
// allocated Calculator_Expression struct, preferring placement in s's segment.
func (s Calculator_evaluate_Params) NewExpression() (Calculator_Expression, error) {
	ss, err := NewCalculator_Expression(s.Struct.Segment())
	if err != nil {
		return Calculator_Expression{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Calculator_evaluate_Params_List is a list of Calculator_evaluate_Params.
type Calculator_evaluate_Params_List struct{ capnp.List }

// NewCalculator_evaluate_Params creates a new list of Calculator_evaluate_Params.
func NewCalculator_evaluate_Params_List(s *capnp.Segment, sz int32) (Calculator_evaluate_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Calculator_evaluate_Params_List{l}, err
}

func (s Calculator_evaluate_Params_List) At(i int) Calculator_evaluate_Params {
	return Calculator_evaluate_Params{s.List.Struct(i)}
}

func (s Calculator_evaluate_Params_List) Set(i int, v Calculator_evaluate_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Calculator_evaluate_Params_List) String() string {
	str, _ := text.MarshalList(0xbb0eaae1557a36d4, s.List)
	return str
}

// Calculator_evaluate_Params_Promise is a wrapper for a Calculator_evaluate_Params promised by a client call.
type Calculator_evaluate_Params_Promise struct{ *capnp.Pipeline }

func (p Calculator_evaluate_Params_Promise) Struct() (Calculator_evaluate_Params, error) {
	s, err := p.Pipeline.Struct()
	return Calculator_evaluate_Params{s}, err
}

func (p Calculator_evaluate_Params_Promise) Expression() Calculator_Expression_Promise {
	return Calculator_Expression_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Calculator_evaluate_Results struct{ capnp.Struct }

// Calculator_evaluate_Results_TypeID is the unique identifier for the type Calculator_evaluate_Results.
const Calculator_evaluate_Results_TypeID = 0x81b1a3f55887a611

func NewCalculator_evaluate_Results(s *capnp.Segment) (Calculator_evaluate_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Calculator_evaluate_Results{st}, err
}

func NewRootCalculator_evaluate_Results(s *capnp.Segment) (Calculator_evaluate_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Calculator_evaluate_Results{st}, err
}

func ReadRootCalculator_evaluate_Results(msg *capnp.Message) (Calculator_evaluate_Results, error) {
	root, err := msg.RootPtr()
	return Calculator_evaluate_Results{root.Struct()}, err
}

func (s Calculator_evaluate_Results) String() string {
	str, _ := text.Marshal(0x81b1a3f55887a611, s.Struct)
	return str
}

func (s Calculator_evaluate_Results) Value() Calculator_Value {
	p, _ := s.Struct.Ptr(0)
	return Calculator_Value{Client: p.Interface().Client()}
}

func (s Calculator_evaluate_Results) HasValue() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Calculator_evaluate_Results) SetValue(v Calculator_Value) error {
	if v.Client == nil {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Calculator_evaluate_Results_List is a list of Calculator_evaluate_Results.
type Calculator_evaluate_Results_List struct{ capnp.List }

// NewCalculator_evaluate_Results creates a new list of Calculator_evaluate_Results.
func NewCalculator_evaluate_Results_List(s *capnp.Segment, sz int32) (Calculator_evaluate_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Calculator_evaluate_Results_List{l}, err
}

func (s Calculator_evaluate_Results_List) At(i int) Calculator_evaluate_Results {
	return Calculator_evaluate_Results{s.List.Struct(i)}
}

func (s Calculator_evaluate_Results_List) Set(i int, v Calculator_evaluate_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Calculator_evaluate_Results_List) String() string {
	str, _ := text.MarshalList(0x81b1a3f55887a611, s.List)
	return str
}

// Calculator_evaluate_Results_Promise is a wrapper for a Calculator_evaluate_Results promised by a client call.
type Calculator_evaluate_Results_Promise struct{ *capnp.Pipeline }

func (p Calculator_evaluate_Results_Promise) Struct() (Calculator_evaluate_Results, error) {
	s, err := p.Pipeline.Struct()
	return Calculator_evaluate_Results{s}, err
}

func (p Calculator_evaluate_Results_Promise) Value() Calculator_Value {
	return Calculator_Value{Client: p.Pipeline.GetPipeline(0).Client()}
}

type Calculator_defFunction_Params struct{ capnp.Struct }

// Calculator_defFunction_Params_TypeID is the unique identifier for the type Calculator_defFunction_Params.
const Calculator_defFunction_Params_TypeID = 0xf287bcba4556dc89

func NewCalculator_defFunction_Params(s *capnp.Segment) (Calculator_defFunction_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Calculator_defFunction_Params{st}, err
}

func NewRootCalculator_defFunction_Params(s *capnp.Segment) (Calculator_defFunction_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Calculator_defFunction_Params{st}, err
}

func ReadRootCalculator_defFunction_Params(msg *capnp.Message) (Calculator_defFunction_Params, error) {
	root, err := msg.RootPtr()
	return Calculator_defFunction_Params{root.Struct()}, err
}

func (s Calculator_defFunction_Params) String() string {
	str, _ := text.Marshal(0xf287bcba4556dc89, s.Struct)
	return str
}

func (s Calculator_defFunction_Params) ParamCount() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s Calculator_defFunction_Params) SetParamCount(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s Calculator_defFunction_Params) Body() (Calculator_Expression, error) {
	p, err := s.Struct.Ptr(0)
	return Calculator_Expression{Struct: p.Struct()}, err
}

func (s Calculator_defFunction_Params) HasBody() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Calculator_defFunction_Params) SetBody(v Calculator_Expression) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBody sets the body field to a newly
// allocated Calculator_Expression struct, preferring placement in s's segment.
func (s Calculator_defFunction_Params) NewBody() (Calculator_Expression, error) {
	ss, err := NewCalculator_Expression(s.Struct.Segment())
	if err != nil {
		return Calculator_Expression{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Calculator_defFunction_Params_List is a list of Calculator_defFunction_Params.
type Calculator_defFunction_Params_List struct{ capnp.List }

// NewCalculator_defFunction_Params creates a new list of Calculator_defFunction_Params.
func NewCalculator_defFunction_Params_List(s *capnp.Segment, sz int32) (Calculator_defFunction_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Calculator_defFunction_Params_List{l}, err
}

func (s Calculator_defFunction_Params_List) At(i int) Calculator_defFunction_Params {
	return Calculator_defFunction_Params{s.List.Struct(i)}
}

func (s Calculator_defFunction_Params_List) Set(i int, v Calculator_defFunction_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Calculator_defFunction_Params_List) String() string {
	str, _ := text.MarshalList(0xf287bcba4556dc89, s.List)
	return str
}

// Calculator_defFunction_Params_Promise is a wrapper for a Calculator_defFunction_Params promised by a client call.
type Calculator_defFunction_Params_Promise struct{ *capnp.Pipeline }

func (p Calculator_defFunction_Params_Promise) Struct() (Calculator_defFunction_Params, error) {
	s, err := p.Pipeline.Struct()
	return Calculator_defFunction_Params{s}, err
}

func (p Calculator_defFunction_Params_Promise) Body() Calculator_Expression_Promise {
	return Calculator_Expression_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Calculator_defFunction_Results struct{ capnp.Struct }

// Calculator_defFunction_Results_TypeID is the unique identifier for the type Calculator_defFunction_Results.
const Calculator_defFunction_Results_TypeID = 0x8d24f465047cd6c8

func NewCalculator_defFunction_Results(s *capnp.Segment) (Calculator_defFunction_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Calculator_defFunction_Results{st}, err
}

func NewRootCalculator_defFunction_Results(s *capnp.Segment) (Calculator_defFunction_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Calculator_defFunction_Results{st}, err
}

func ReadRootCalculator_defFunction_Results(msg *capnp.Message) (Calculator_defFunction_Results, error) {
	root, err := msg.RootPtr()
	return Calculator_defFunction_Results{root.Struct()}, err
}

func (s Calculator_defFunction_Results) String() string {
	str, _ := text.Marshal(0x8d24f465047cd6c8, s.Struct)
	return str
}

func (s Calculator_defFunction_Results) Func() Calculator_Function {
	p, _ := s.Struct.Ptr(0)
	return Calculator_Function{Client: p.Interface().Client()}
}

func (s Calculator_defFunction_Results) HasFunc() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Calculator_defFunction_Results) SetFunc(v Calculator_Function) error {
	if v.Client == nil {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Calculator_defFunction_Results_List is a list of Calculator_defFunction_Results.
type Calculator_defFunction_Results_List struct{ capnp.List }

// NewCalculator_defFunction_Results creates a new list of Calculator_defFunction_Results.
func NewCalculator_defFunction_Results_List(s *capnp.Segment, sz int32) (Calculator_defFunction_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Calculator_defFunction_Results_List{l}, err
}

func (s Calculator_defFunction_Results_List) At(i int) Calculator_defFunction_Results {
	return Calculator_defFunction_Results{s.List.Struct(i)}
}

func (s Calculator_defFunction_Results_List) Set(i int, v Calculator_defFunction_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Calculator_defFunction_Results_List) String() string {
	str, _ := text.MarshalList(0x8d24f465047cd6c8, s.List)
	return str
}

// Calculator_defFunction_Results_Promise is a wrapper for a Calculator_defFunction_Results promised by a client call.
type Calculator_defFunction_Results_Promise struct{ *capnp.Pipeline }

func (p Calculator_defFunction_Results_Promise) Struct() (Calculator_defFunction_Results, error) {
	s, err := p.Pipeline.Struct()
	return Calculator_defFunction_Results{s}, err
}

func (p Calculator_defFunction_Results_Promise) Func() Calculator_Function {
	return Calculator_Function{Client: p.Pipeline.GetPipeline(0).Client()}
}

type Calculator_getOperator_Params struct{ capnp.Struct }

// Calculator_getOperator_Params_TypeID is the unique identifier for the type Calculator_getOperator_Params.
const Calculator_getOperator_Params_TypeID = 0x8a8dceb4f4a3c530

func NewCalculator_getOperator_Params(s *capnp.Segment) (Calculator_getOperator_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Calculator_getOperator_Params{st}, err
}

func NewRootCalculator_getOperator_Params(s *capnp.Segment) (Calculator_getOperator_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Calculator_getOperator_Params{st}, err
}

func ReadRootCalculator_getOperator_Params(msg *capnp.Message) (Calculator_getOperator_Params, error) {
	root, err := msg.RootPtr()
	return Calculator_getOperator_Params{root.Struct()}, err
}

func (s Calculator_getOperator_Params) String() string {
	str, _ := text.Marshal(0x8a8dceb4f4a3c530, s.Struct)
	return str
}

func (s Calculator_getOperator_Params) Op() Calculator_Operator {
	return Calculator_Operator(s.Struct.Uint16(0))
}

func (s Calculator_getOperator_Params) SetOp(v Calculator_Operator) {
	s.Struct.SetUint16(0, uint16(v))
}

// Calculator_getOperator_Params_List is a list of Calculator_getOperator_Params.
type Calculator_getOperator_Params_List struct{ capnp.List }

// NewCalculator_getOperator_Params creates a new list of Calculator_getOperator_Params.
func NewCalculator_getOperator_Params_List(s *capnp.Segment, sz int32) (Calculator_getOperator_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Calculator_getOperator_Params_List{l}, err
}

func (s Calculator_getOperator_Params_List) At(i int) Calculator_getOperator_Params {
	return Calculator_getOperator_Params{s.List.Struct(i)}
}

func (s Calculator_getOperator_Params_List) Set(i int, v Calculator_getOperator_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Calculator_getOperator_Params_List) String() string {
	str, _ := text.MarshalList(0x8a8dceb4f4a3c530, s.List)
	return str
}

// Calculator_getOperator_Params_Promise is a wrapper for a Calculator_getOperator_Params promised by a client call.
type Calculator_getOperator_Params_Promise struct{ *capnp.Pipeline }

func (p Calculator_getOperator_Params_Promise) Struct() (Calculator_getOperator_Params, error) {
	s, err := p.Pipeline.Struct()
	return Calculator_getOperator_Params{s}, err
}

type Calculator_getOperator_Results struct{ capnp.Struct }

// Calculator_getOperator_Results_TypeID is the unique identifier for the type Calculator_getOperator_Results.
const Calculator_getOperator_Results_TypeID = 0xd18fbb7763c08c20

func NewCalculator_getOperator_Results(s *capnp.Segment) (Calculator_getOperator_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Calculator_getOperator_Results{st}, err
}

func NewRootCalculator_getOperator_Results(s *capnp.Segment) (Calculator_getOperator_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Calculator_getOperator_Results{st}, err
}

func ReadRootCalculator_getOperator_Results(msg *capnp.Message) (Calculator_getOperator_Results, error) {
	root, err := msg.RootPtr()
	return Calculator_getOperator_Results{root.Struct()}, err
}

func (s Calculator_getOperator_Results) String() string {
	str, _ := text.Marshal(0xd18fbb7763c08c20, s.Struct)
	return str
}

func (s Calculator_getOperator_Results) Func() Calculator_Function {
	p, _ := s.Struct.Ptr(0)
	return Calculator_Function{Client: p.Interface().Client()}
}

func (s Calculator_getOperator_Results) HasFunc() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Calculator_getOperator_Results) SetFunc(v Calculator_Function) error {
	if v.Client == nil {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Calculator_getOperator_Results_List is a list of Calculator_getOperator_Results.
type Calculator_getOperator_Results_List struct{ capnp.List }

// NewCalculator_getOperator_Results creates a new list of Calculator_getOperator_Results.
func NewCalculator_getOperator_Results_List(s *capnp.Segment, sz int32) (Calculator_getOperator_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Calculator_getOperator_Results_List{l}, err
}

func (s Calculator_getOperator_Results_List) At(i int) Calculator_getOperator_Results {
	return Calculator_getOperator_Results{s.List.Struct(i)}
}

func (s Calculator_getOperator_Results_List) Set(i int, v Calculator_getOperator_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Calculator_getOperator_Results_List) String() string {
	str, _ := text.MarshalList(0xd18fbb7763c08c20, s.List)
	return str
}

// Calculator_getOperator_Results_Promise is a wrapper for a Calculator_getOperator_Results promised by a client call.
type Calculator_getOperator_Results_Promise struct{ *capnp.Pipeline }

func (p Calculator_getOperator_Results_Promise) Struct() (Calculator_getOperator_Results, error) {
	s, err := p.Pipeline.Struct()
	return Calculator_getOperator_Results{s}, err
}

func (p Calculator_getOperator_Results_Promise) Func() Calculator_Function {
	return Calculator_Function{Client: p.Pipeline.GetPipeline(0).Client()}
}

const schema_85150b117366d14b = "x\xda\xacV_h\x1c\xd5\x1b=\xdf\xbd3;\x816" +
	"\xdd\xdc\xce.\xbf_$\xa56n\xd1,\x1a\xda\xa6)" +
	"%P6Zbk|p\xa7ji\x8b\x0fNv'" +
	"ue\xb2\xbb\x9d\x9dM\xd2 H\xc5\x12,.\xd2j" +
	"\xd5>\x88\x0fAA\xa5\x0f\x05\x05\xb1*\x05)\xfeA" +
	"\x84\x9aV\x11\xd4X\x1f\xd2\xfaP\x1f\xa4\xc1\x17\xf5\xca" +
	"\x9d\xec\xecN\x92\x9a\xb4\xe8S.3w\xce\xf7}\xe7" +
	"\x9c\xefd7\xbd\xce\xfa\xd9f\xfdJ\x0c\xb0\xb2zL" +
	"\x8a7'\xf7\xcdM\x9d9\x02\xd1A\x80N\x06\xd0\xb3" +
	"\x9f?I \xd3\xe1\x19\x90\x9c\x9d\x99\xb5\xc7\xfb_\x9c" +
	"\x84\xe8`r\xdb\x97\xbd3'z^}\x05\xa0\x9e\xa3" +
	"<M\xe6In\x00\xe6q~\x10$7\x9d\x9f\xba\xfe" +
	"\xeeW\xb5c\xb0:\x88\x00MA}\xc4'\x14\xd4\xe7" +
	"\x01\xd4g\xdf<\xa59\xd7S\xb5h\xad_\xf83\xea" +
	"\xc2\\p\xa1\x01/\x04\x97\x0f^\x18\xae\x88U\xc9\xa3" +
	"\x00\x99I\xedgs\x83\xb6\x0b0\xf7k\x9f\x9a?(" +
	"h\xf9\xbf\xb1\xf7\xcb3\x8f\x1f?\x03\xb1\xb1\x81v^" +
	";\xa6\xd0.i\x0a\xed\xe2\xb6\x89G/\xbf\xbd\xe6l" +
	"\xb4\x9c\xae\x0f\xa9\x0bBW\x17N\xff\x98(\xfc\xfe\xce" +
	"O\xe7`ml4\xdc\xab\x9fP\x17\x06\x82\x0b_\xef" +
	"\xfeuz\xebk\xb3\x9f@t\xf0\x05\xb3;\xfaZ2" +
	"\xab\xba\x9a\xfd\x90\xbe\xcb<\xa5N\xf2\xf6\xe7\xcf\xe5\xc6" +
	"\xce\xbep!Z\xef\x88\x1e\x8cW\x0b\xe0\xf6\xbdW\xbb" +
	"\xe4o|x\x1a\xa23,wZ\xf7\x08\x9aL\xd6\x1e" +
	"\x99\xfb\xe2\xdb\xed\x17\x15u\x11\x96\x07\x98\xa1\x91\xd6s" +
	"J\xef#\xf3\xad\xa0\xda\x1b\xfa\x15\x90\x1c\xaeMNO" +
	"u\x9e\xfc\x0e\xd6\x9d\xc4\x9a\x1f'\x99A@\x8f\x13\x0b" +
	"f<\x14\x1b\x03\xc9\xce\xab\xe9\xb5w\x1c\xfcx\x16V" +
	"gc\xc6\xcb\xb1@\x94k1\xd5\xd4K\xfc\xd9\x97w" +
	"\xf4]\xbd\xb6d\xc6V#M\xe6:CUm7v" +
	"\x99\xf7\xaa\x93|\xee\xfb\xbd\x03\x1f|8\xf9[]\xe3" +
	"\xf9!\xbb\x8c\x00\xaf\xd7\x18\xc3=2g\xbb\xb9\xaak" +
	"\xfbZ\xc9\xeb\xce\xd9\xe5b\xb9og\xfdI\xc9\xebv" +
	"Fm\xb7j\xfbNj\x8fS\x89W]\xbfbi\\" +
	"\x034\x02D\xeb\x16\xc0j\xe1d%\x18\xadW\xf7\x1c" +
	"\x12M\x05@$@\x0dt~#\xf4\x87\xca\x8e\x17W" +
	"\xa7,\x91\xd5F\x0c\x10]\x9d\xc1\x97\x1b\x06\x01bb" +
	"\x9d\xfa\xc3E{\x1f`\xd8\xf9\xbc\xacT\x87|\xcf\xce" +
	"\xf9\x00\xe4H\xd5\xf5\x0be\xf70\x80L\xbe0Z\xc8" +
	";\xcb\x8fr\xd0\xf1U=uNe\xb2\xb6g\x8f," +
	"\x18\xe6\xb6\xe60\xbcT\xa6xs\x8f@\x14\x8fL\xa2" +
	"\xdf\x08<\xef\x0c\xdf_-\xe6\xfcB\xa9\xa8\xa8RL" +
	"!\x8a\x9en\xa2\xc7\x87\xab\xc5\x1c\x89\xa6\x8e\x8b\x98b" +
	"\x8b\xf1\x0d\xbf\xe4YmDM\xdf\x88\xf6\x03\x11\xab\xb7" +
	"o\x89x\"9\x18\x09\x80\xe4\xa0\x1c\x18/{N\xa5" +
	"R\x00/\x15\xd7\xefU\"\xc9\xb0QEb\xc8\x08\x00" +
	"k5\xd7\x81\xc6\x12R\x184\xc2\x1a\x04\x13\x0f\x18D" +
	"\x0d3Q\x18\x0cb\xc7\x10\x98\xe85\x885\xc2\x84\xc2" +
	"\xad\x12]\xea\xdd\x06C\x86\x1e\x02\xd0O2d\x0aF" +
	"\xa1T\xec'\x19\xca\x025f?ei\x05\xa6\xc3\xee" +
	"\xbbs\xb6\xeb\xa6\xe6u\xc4\x02\xae\xfb\xea\\\xa7\x18e" +
	"\xca\xc1{Z\x03\xcar\xa2U`\xeax\x93\x96\xcf\xda" +
	"\x9e\xb1\xc8$\x07\x02\x9a\xc8\xfa?#\xe9D\x98\xa5\xb6" +
	"\xa68 j\xc3-\x0d1o\x18Za\xb7T\xf3\xab" +
	"V\xda(\xa509j\x9d\xb4@\xcd0\xc1(\x8c\x15" +
	"!\xd2`B7\xe2\x9ec\xe7o\x82\xee\xe8\xd6\xfcK" +
	"ck\xff\xd4\xb0\xd3\xad\x9aIe\xd7\x07b-?\xa0" +
	"\xf2sF\xd1^*\x06\xa1\xc1\xb5\xd5R\x06\xad\xd8\xf7" +
	"\x01\xd6c\x9c\xac'\x18\xb5\xd2_2\xa1\xf2N8\x13" +
	"\x80\x95\xe7d\x95\x19\xb5\xb2?e\"H\x99\x91=\x80" +
	"\xe5r\xb2\xc6\x19\xb5\xf2?$E\"ZT\xd3`O" +
	"\xbb\x05\xdf\xf1l\xb7\xc1z\xd9sF\x0b\xa5j\x05\x99" +
	"\xbaZK\xa3.\xf0\x9a\xe3; \x8fZ\xc0\xa8\x05\x14" +
	"W\xfa.O@\xb8\xa0\xca\x0c\x86\xed\xbaV\x8b\"7" +
	"A\\\x85\xe1 `\xdd\xc5\xc9\xda\xcaH\x10%H\x03" +
	"\xc4f\xe5\xef\xbb9Y\xbb\x19\xc9\xe1\xe6./e~" +
	"\x91\xfb\x17zt\xcd-(\xb3'3\xaf\xfc\x7f`P" +
	"\xe5\xfc\xb8_Wo\xde\xa3\xe1\xef\x02\x0a\xff\xbd7<" +
	"\xaa\xd8[\xe8Qm\xa5\xf0\x0d\x93\xbd\xa5\xd1i\xd7\x81" +
	"&\x89\x8aC\xf5ls\xba\xce\xe1vV\xd7mg\xa9" +
	"\x0a^\xf4I\x03#\x0d\x14\x1f*\xe5\x0f/\xdd\xea\xbf" +
	"\x03\x00\x00\xff\xff\x04\x0b\xce\xec"

func init() {
	schemas.Register(schema_85150b117366d14b,
		0x81b1a3f55887a611,
		0x8793407861e6dfe6,
		0x8a8dceb4f4a3c530,
		0x8d24f465047cd6c8,
		0x97983392df35cc36,
		0xb19160df70b87717,
		0xbb0eaae1557a36d4,
		0xc0e0abf76914dead,
		0xc3e69d34d3ee48d2,
		0xd18fbb7763c08c20,
		0xd3532574d58db558,
		0xd438d7caf5548d15,
		0xd99522a3d3878d66,
		0xe6be6723122ae822,
		0xede83a3d96840394,
		0xf287bcba4556dc89)
}
