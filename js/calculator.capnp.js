"use strict";
/* tslint:disable */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * This file has been automatically generated by the [capnpc-ts utility](https://github.com/jdiaz5513/capnp-ts).
 */
const capnp = require("capnp-ts");
const capnp_ts_1 = require("capnp-ts");
exports._capnpFileId = "85150b117366d14b";
class Calculator_Expression_Call extends capnp_ts_1.Struct {
    getFunction() { return capnp_ts_1.Struct.getPointerAs(0, capnp.Interface, this); }
    setFunction(value) { capnp_ts_1.Struct.copyFrom(value, capnp_ts_1.Struct.getPointer(0, this)); }
    adoptParams(value) { capnp_ts_1.Struct.adopt(value, capnp_ts_1.Struct.getPointer(1, this)); }
    disownParams() { return capnp_ts_1.Struct.disown(this.getParams()); }
    getParams() { return capnp_ts_1.Struct.getList(1, Calculator_Expression_Call._Params, this); }
    hasParams() { return !capnp_ts_1.Struct.isNull(capnp_ts_1.Struct.getPointer(1, this)); }
    initParams(length) { return capnp_ts_1.Struct.initList(1, Calculator_Expression_Call._Params, length, this); }
    setParams(value) { capnp_ts_1.Struct.copyFrom(value, capnp_ts_1.Struct.getPointer(1, this)); }
    toString() { return "Calculator_Expression_Call_" + super.toString(); }
}
Calculator_Expression_Call._capnp = { displayName: "call", id: "d99522a3d3878d66", size: new capnp_ts_1.ObjectSize(16, 2) };
exports.Calculator_Expression_Call = Calculator_Expression_Call;
var Calculator_Expression_Which;
(function (Calculator_Expression_Which) {
    Calculator_Expression_Which[Calculator_Expression_Which["LITERAL"] = 0] = "LITERAL";
    Calculator_Expression_Which[Calculator_Expression_Which["PREVIOUS_RESULT"] = 1] = "PREVIOUS_RESULT";
    Calculator_Expression_Which[Calculator_Expression_Which["PARAMETER"] = 2] = "PARAMETER";
    Calculator_Expression_Which[Calculator_Expression_Which["CALL"] = 3] = "CALL";
})(Calculator_Expression_Which = exports.Calculator_Expression_Which || (exports.Calculator_Expression_Which = {}));
class Calculator_Expression extends capnp_ts_1.Struct {
    getLiteral() {
        capnp_ts_1.Struct.testWhich("literal", capnp_ts_1.Struct.getUint16(8, this), 0, this);
        return capnp_ts_1.Struct.getFloat64(0, this);
    }
    isLiteral() { return capnp_ts_1.Struct.getUint16(8, this) === 0; }
    setLiteral(value) {
        capnp_ts_1.Struct.setUint16(8, 0, this);
        capnp_ts_1.Struct.setFloat64(0, value, this);
    }
    getPreviousResult() {
        capnp_ts_1.Struct.testWhich("previousResult", capnp_ts_1.Struct.getUint16(8, this), 1, this);
        return capnp_ts_1.Struct.getPointerAs(0, capnp.Interface, this);
    }
    isPreviousResult() { return capnp_ts_1.Struct.getUint16(8, this) === 1; }
    setPreviousResult(value) {
        capnp_ts_1.Struct.setUint16(8, 1, this);
        capnp_ts_1.Struct.copyFrom(value, capnp_ts_1.Struct.getPointer(0, this));
    }
    getParameter() {
        capnp_ts_1.Struct.testWhich("parameter", capnp_ts_1.Struct.getUint16(8, this), 2, this);
        return capnp_ts_1.Struct.getUint32(0, this);
    }
    isParameter() { return capnp_ts_1.Struct.getUint16(8, this) === 2; }
    setParameter(value) {
        capnp_ts_1.Struct.setUint16(8, 2, this);
        capnp_ts_1.Struct.setUint32(0, value, this);
    }
    getCall() {
        capnp_ts_1.Struct.testWhich("call", capnp_ts_1.Struct.getUint16(8, this), 3, this);
        return capnp_ts_1.Struct.getAs(Calculator_Expression_Call, this);
    }
    initCall() {
        capnp_ts_1.Struct.setUint16(8, 3, this);
        return capnp_ts_1.Struct.getAs(Calculator_Expression_Call, this);
    }
    isCall() { return capnp_ts_1.Struct.getUint16(8, this) === 3; }
    setCall() { capnp_ts_1.Struct.setUint16(8, 3, this); }
    toString() { return "Calculator_Expression_" + super.toString(); }
    which() { return capnp_ts_1.Struct.getUint16(8, this); }
}
Calculator_Expression.LITERAL = Calculator_Expression_Which.LITERAL;
Calculator_Expression.PREVIOUS_RESULT = Calculator_Expression_Which.PREVIOUS_RESULT;
Calculator_Expression.PARAMETER = Calculator_Expression_Which.PARAMETER;
Calculator_Expression.CALL = Calculator_Expression_Which.CALL;
Calculator_Expression._capnp = { displayName: "Expression", id: "d438d7caf5548d15", size: new capnp_ts_1.ObjectSize(16, 2) };
exports.Calculator_Expression = Calculator_Expression;
class Calculator_Value extends capnp_ts_1.Struct {
    toString() { return "Calculator_Value_" + super.toString(); }
}
Calculator_Value._capnp = { displayName: "Value", id: "c3e69d34d3ee48d2", size: new capnp_ts_1.ObjectSize(0, 0) };
exports.Calculator_Value = Calculator_Value;
class Calculator_Function extends capnp_ts_1.Struct {
    toString() { return "Calculator_Function_" + super.toString(); }
}
Calculator_Function._capnp = { displayName: "Function", id: "ede83a3d96840394", size: new capnp_ts_1.ObjectSize(0, 0) };
exports.Calculator_Function = Calculator_Function;
var Calculator_Operator;
(function (Calculator_Operator) {
    Calculator_Operator[Calculator_Operator["ADD"] = 0] = "ADD";
    Calculator_Operator[Calculator_Operator["SUBTRACT"] = 1] = "SUBTRACT";
    Calculator_Operator[Calculator_Operator["MULTIPLY"] = 2] = "MULTIPLY";
    Calculator_Operator[Calculator_Operator["DIVIDE"] = 3] = "DIVIDE";
})(Calculator_Operator = exports.Calculator_Operator || (exports.Calculator_Operator = {}));
class Calculator extends capnp_ts_1.Struct {
    toString() { return "Calculator_" + super.toString(); }
}
Calculator.Expression = Calculator_Expression;
Calculator.Value = Calculator_Value;
Calculator.Function = Calculator_Function;
Calculator.Operator = Calculator_Operator;
Calculator._capnp = { displayName: "Calculator", id: "97983392df35cc36", size: new capnp_ts_1.ObjectSize(0, 0) };
exports.Calculator = Calculator;
Calculator_Expression_Call._Params = capnp.CompositeList(Calculator_Expression);
